[tool.mypy]
python_version = "3.12"
disallow_untyped_defs = true
follow_imports = "silent"
ignore_missing_imports = true
enable_error_code = ["ignore-without-code"]
exclude = ["settings.*", "tests.*", ".venv.*"]

[tool.ruff]
fix = true
line-length = 120

lint.select = [
    "ALL",
]

lint.ignore = [
    "BLE001",    # Do not catch blind exception: {name}
    "COM812",    # Missing trailing comma (this was included to avoid conflicts with formatter)
    "ISC001",    # Single line implicit string concatenation (this was included to avoid conflicts with formatter)
    "D100",      # Missing docstring in public module
    "D101",      # Missing docstring in public class
    "D102",      # Missing docstring in public method
    "D103",      # Missing docstring in public function
    "D104",      # Missing docstring in public package
    "D106",      # Missing docstring in public nested class
    "D107",      # Missing docstring in __init__
    "D203",      # 1 blank line required before class docstring
    "D205",      # 1 blank line required between summary line and description
    "D212",      # Multi-line docstring summary should start at the first line
    "ERA001",    # Found commented-out code
    "FA100",     # Missing from __future__ import annotations, but uses {name}
    "FA102",     # Missing from __future__ import annotations, but uses {reason}
    "PLW2901",   # Outer {outer_kind} variable {name} overwritten by inner {inner_kind} target
    "N805",      # First argument of a method should be named self
    "RUF001",    # String contains ambiguous {}. Did you mean {}?
    "RUF002",    # Docstring contains ambiguous {}. Did you mean {}?
    "RUF003",    # Comment contains ambiguous {}. Did you mean {}?
    "RUF015",    # Prefer next({iterable}) over single element slice
    "S104",      # Possible binding to all interfaces
    "S307",      # Use of possibly insecure function; consider using ast.literal_eval
]

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "modules",
    "settings",
    "tests"
]

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["fastapi.Depends", "fastapi.params.Depends", "fastapi.Query", "fastapi.params.Query"]